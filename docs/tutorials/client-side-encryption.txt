.. _client-side-encryption:

======================
Client-Side Encryption
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

New in MongoDB 4.2, client-side encryption allows administrators and developers
to encrypt specific fields in MongoDB documents before inserting them into the
database.

With client-side encryption, developers can encrypt fields client-side without
any server-side configuration or directives. Client-side field-level encryption
supports workloads where applications must guarantee that unauthorized parties,
including server administrators, cannot read the encrypted data.

Installation
------------

Client-side encryption requires the installation of additional packages.

libmongocrypt
~~~~~~~~~~~~~

Libmongocrypt is a C library used by the driver for client-side encryption.
To use client-side encryption, you must install the libmongocrypt binary
on the machine running your Ruby program.

To download a pre-built binary:

- Download a tarball of all libmongocrypt variations `here <https://s3.amazonaws.com/mciuploads/libmongocrypt/all/master/latest/libmongocrypt-all.tar.gz>`_.

- Extract the file you downloaded. You will see a list of directories, each
  corresponding to an operating system. Find the directory that matches your
  operating system and open it.

- Inside that folder, open the folder called "nocrypto." In either the
  lib or lb64 folder, you will find the libmongocrypt.so or
  libmongocrypt.dylib or libmongocrypt.dll file, depending on your OS.

- Move that file to wherever you want to keep it on your machine. You may delete
  the other files included in the tarball.

To build the binary from source:

- Follow the instructions in the README in the `libmongocrypt GitHub repo <https://github.com/mongodb/libmongocrypt>`_.

Once you have the libmongocrypt binary on your machine, specify the path to the
binary using the LIBMONGOCRYPT_PATH environment variable. It is recommended that
you add this variable to your rc files. For example:

.. code-block:: bash

  export LIBMONGOCRYPT_PATH=/path/to/your/libmongocrypt.so

mongocryptd
~~~~~~~~~~~

Mongocryptd is a daemon that tells the driver which fields to encrypt in a
given operation. It is only required for automatic encryption, which is an
enterprise-only feature. If you only intend to use explicit encryption, you may
skip this step.

Mongocryptd comes pre-packaged with enterprise builds of the MongoDB server
(versions 4.2 and newer). If you must install mongocryptd separately, follow
the `installation instructions in the MongoDB manual <https://docs.mongodb.com/manual/reference/security-client-side-encryption-appendix/#installation>`_.

Automatic Encryption
--------------------

Automatic encryption is a feature that allows users to configure a
``Mongo::Client`` instance to always encrypt specific document fields when
performing database operations. Once the ``Mongo::Client`` is configured, it
will automatically encrypt any field that requires encryption before writing
it to the database, and it will automatically decrypt those fields when reading
them. Automatic encryption is an enterprise-only feature.

The following example provides a demonstration of auto-encryption using a local
master key.

.. code-block:: ruby

  require 'mongo'

  # Generate a local encryption master key
  # To reuse this master key, persist it to a file or environment variable
  # on your machine.
  local_master_key = SecureRandom.random_bytes(96)

  kms_providers = {
    local: {
      key: local_master_key
    }
  }

  # Create an encryption data key and insert it into the key vault collection
  key_vault_client = Mongo::Client.new(['localhost:27017'])

  client_encryption = Mongo::ClientEncryption.new(
    key_vault_client,
    {
      key_vault_namespace: 'admin.datakeys',
      kms_providers: kms_providers
    }
  )

  data_key_id = client_encryption.create_data_key('local')

  # Create a schema map
  schema_map = {
    'encryption_db.encryption_coll': {
      properties: {
        encrypted_field: {
          encrypt: {
            keyId: [BSON::Binary.new(data_key_id, :uuid)],
            bsonType: "string",
            algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
          }
        }
      },
      bsonType: "object"
    }
  }

  # Configure the client for automatic encryption
  client = Mongo::Client.new(
    ['localhost:27017'],
    auto_encryption_options: {
      key_vault_namespace: 'admin.datakeys',
      kms_providers: kms_providers,
      schema_map: schema_map
    }
  )

  collection = client.use(:encryption_db)[:encryption_coll]
  collection.drop # Make sure there is no data in the collection

  # The string "sensitive data" will be encrypted and stored in the database
  # as ciphertext
  collection.insert_one(encrypted_field: 'sensitive data')

  # The data is decrypted before being returned to the user
  collection.find(encrypted_field: 'sensitive data').first['encrypted_field']
  # => "sensitive data"

  # A client with no auto_encryption_options is unable to decrypt the data
  client_no_encryption = Mongo::Client.new(['localhost:27017'])
  client_no_encryption.use(:encryption_db)[:encryption_coll].find.first['encrypted_field']
  # => <BSON::Binary...>

For more information about creating an encryption master key, creating a data key,
or creating a schema map, see later sections of this tutorial.

.. seealso::
  `Creating A Master Key`_,
  `Creating A Data Key`_,
  `Creating A Schema Map`_,

Explicit Encryption
-------------------
Explicit encryption is a feature that allows users to encrypt and decrypt
individual pieces of data such as strings, integers, or symbols. Explicit
encryption is a community feature and does not require an enterprise build
of the MongoDB server to use. To perform all explicit encryption and decryption
operations, use an instance of the ClientEncryption class.

The following is an example of using explicit encryption with a local encryption
master key to encrypt a piece of data before inserting it into the database,
and then decrypting it after reading it from the database.

.. code-block:: ruby

  require 'mongo'

  # Generate a local encryption master key
  # To reuse this master key, persist it to a file or environment variable
  # on your machine.
  local_master_key = SecureRandom.random_bytes(96)

  kms_providers = {
    local: {
      key: local_master_key
    }
  }

  # Create an encryption data key and insert it into the key vault collection
  key_vault_client = Mongo::Client.new(['localhost:27017'])

  client_encryption = Mongo::ClientEncryption.new(
    key_vault_client,
    {
      key_vault_namespace: 'admin.datakeys',
      kms_providers: kms_providers
    }
  )

  data_key_id = client_encryption.create_data_key('local')

  # The value to encrypt
  value = 'sensitive data'

  # Encrypt the value
  encrypted_value = client_encryption.encrypt(
    'sensitive data',
    {
      key_id: data_key_id,
      algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
    }
  )

  # Create the client you will use to read and write the data to MongoDB
  client = Mongo::Client.new(['localhost:27017'])
  collection = client.use(:encryption_db)[:encryption_coll]
  collection.drop # Make sure there is no data in the collection

  # Insert the encrypted value into the collection
  collection.insert_one(encrypted_field: encrypted_value)

  # Use the client to read the encrypted value from the database, then
  # use the ClientEncryption object to decrypt it
  find_result = collection.find(encrypted_field: encrypted_value).first['encrypted_field']
  # => <BSON::Binary...> (the find result is encrypted)

  unencrypted_result = client_encryption.decrypt(find_result)
  # => "sensitive data"

For more information about creating an encryption master key, creating a data key,
or creating a schema map, see later sections of this tutorial.

.. seealso::
  `Creating A Master Key`_,
  `Creating A Data Key`_,
  `Creating A Schema Map`_,

Creating a Master Key
---------------------
Both automatic encryption and explicit encryption require an encryption master key.
This master key is used to encrypt data keys, which are in turn used to encrypt
user data. The master key can be generated in one of two ways: by creating a
local key, or by creating a key in the Amazon Web Services Key Management
Service (AWS KMS).

Local Master Key
~~~~~~~~~~~~~~~~
A local master key is a 96-byte binary string. It should be persisted
on your machine as an environment variable or in a text file.

.. warning::

  Using a local master key is insecure and not recommended if you plan
  to use client-side encryption in production.

Run the following code to generate a local master key using Ruby:

.. code-block:: ruby

  require 'securerandom'

  local_master_key = SecureRandom.random_bytes(96)

AWS Master Key
~~~~~~~~~~~~~~
It is recommended that you use Amazon's Key Management Service to create and
store your master key. To do so, follow steps 1 and 2 of the
:manual:`"Convert to a Remote Master Key" section</ecosystem/use-cases/client-side-field-level-encryption-local-key-to-kms/#convert-to-a-remote-master-key>`
in the MongoDB Client-Side Encryption documentation.

For more information about creating a master key, see the MongoDB manual.

.. seealso::

  :manual:`Create a Master Key </ecosystem/use-cases/client-side-field-level-encryption-guide/#a-create-a-master-key>`

Creating a Data Key
-------------------
Once you have created a master key, create a data key by calling the
``#create_data_key`` method on an instance of the ``Mongo::ClientEncryption``
class. This method generates a new data key and inserts it into the key vault
collection, which is the MongoDB collection in which you choose to store your
data keys. The ``#create_data_key`` method returns id of the newly-created
data key in the form of a BSON::Binary object.

Create a Data Key Using a Local Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have created a local master key, you may use it to generate a new data
key with the following code snippet:

.. code-block:: ruby

  # A Mongo::Client instance that will be used to connect to the key vault
  # collection. Replace the server address with the address of the MongoDB
  # server where you would like to store your key vault collection.
  key_vault_client = Mongo::Client.new(['localhost:27017'])

  client_encryption = Mongo::ClientEncryption.new(
    key_vault_client,
    {
      # Replace with the database and collection names for your key vault collection
      key_vault_namespace: 'admin.datakeys',
      kms_providers: {
        local: {
          key: local_master_key
        }
      }
    }
  )

  data_key_id = client_encryption.create_data_key('local')

See the `Local Master Key`_ section for more information about generating a new
local master key.

Create a Data Key Using an AWS Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have created an AWS master key, note the access key ID and the secret access
key of the IAM user that has permissions to use the key. Additionally, note
the AWS region and the Amazon Resource Number (ARN) of your master key. You will
use that information to generate a data key.

.. code-block:: ruby

  # A Mongo::Client instance that will be used to connect to the key vault
  # collection. Replace the server address with the address of the MongoDB
  # server where you would like to store your key vault collection.
  key_vault_client = Mongo::Client.new(['localhost:27017'])

  client_encryption = Mongo::ClientEncryption.new(
    key_vault_client,
    {
      # Replace with the database and collection names for your key vault collection
      key_vault_namespace: 'admin.datakeys',
      kms_providers: {
        aws: {
          access_key_id: 'IAM-ACCESS-KEY-ID',
          secret_access_key: 'IAM-SECRET-ACCESS-KEY'
        }
      }
    }
  )

  data_key_id = client_encryption.create_data_key(
    'aws',
    {
      master_key: {
        region: 'REGION-OF-YOUR-MASTER-KEY',
        key: 'ARN-OF-YOUR-MASTER-KEY'
      }

    }
  )

See the `AWS Master Key`_ section of this tutorial  for more information about
generating a new master key on AWS and finding the information you need to
create data keys.

For more information about creating a data key, see the MongoDB manual.

.. seealso::

  :manual:`Create a Data Encryption Key </ecosystem/use-cases/client-side-field-level-encryption-guide/#b-create-a-data-encryption-key>`

Creating a Schema Map
---------------------

.. note::

  Schema maps are only used in automatic encryption.

Once you have created a data key, you can use it to encrypt and decrypt data
during automatic encryption by referencing it in a schema map. A schema map
is a Hash that provides the ``Mongo::Client`` with information about which
fields to automatically encrypt and decrypt.

The code snippet at the top of this tutorial demonstrates creating a schema
map using a Ruby ``Hash``. While this will work, schema maps can grow quite
large and it could be unweildy to include them in your Ruby code. Instead, it is
recommended that you store them in a separate JSON (JavaScript Object Notation)
file.

Before creating the JSON file, Base64-encode the UUID of the your data key.

.. code-block:: ruby

  require 'base64'

  # Take note of the Base64-encoded uuid
  Base64.encode64(data_key_id)

Then, create a new JSON file containing your schema map in the extended JSON
format defined by the :manual:`Extended JSON v2 Documentation`</reference/mongodb-extended-json>`.

Note that:

* ``encryption_db`` and ``encryption_coll`` should be replaced with the
  names of the database and collection where you plan to store encrypted data.
* ``encrypted_field`` should be replaced with the name of the field you want to encrypt.
* ``"bsonType": "string"`` should be replaced with the data type you intend to
  encrypt, such as ``"bsonType": "integer"`` or ``"bsonType": "symbol"``.

.. code-block:: json

  {
    "encryption_db.encryption_coll": {
      "properties": {
        "encrypted_field": {
          "encrypt": {
            "keyId": [{
              "$binary": {
                "base64": "YOUR-BASE64-ENCODED-DATA-KEY-ID",
                "subType": "04"
              }
            }],
            "bsonType": "string",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
          }
        }
      },
      "bsonType": "object"
    }
  }

When you intend to use your schema map, convert it to a Ruby ``Hash`` using the
``BSON::ExtJSON`` module in the ``bson`` Ruby gem.

.. code-block:: ruby

  require 'bson'

  # schema_map is a Ruby Hash
  schema_map = BSON::ExtJSON.parse(File.open('/path/to/your/file.json'))

For more information about schema maps, see the MongoDB manual.

.. seealso::

  :manual:`Specify Encrypted Fields Using JSON Schema`</ecosystem/use-cases/client-side-field-level-encryption-guide/#c-specify-encrypted-fields-using-json-schema>`
