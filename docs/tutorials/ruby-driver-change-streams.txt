==============
Change Streams
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

As of version 3.6 of the MongoDB server, a new ``$changeStream`` pipeline stage
is supported in the aggregation framework. The Ruby driver provides an API for
receiving notifications for changes to a particular collection using this
new pipeline stage. Although you can create a change stream using the pipeline
operator and aggregation framework directly, it is recommended to use the
driver API described below as the driver resumes the change stream if there is
a timeout, a network error or another type of a resumable error.

Change streams on the server require a ``"majority"`` read concern or no
read concern.

Change streams do not work properly with JRuby because of the issue documented here_.
Namely, JRuby eagerly evaluates ``#next`` on an Enumerator in a background
green thread, therefore calling ``#next`` on the change stream will cause
getMores to be called in a loop in the background.

.. _here: https://github.com/jruby/jruby/issues/4212

Watching for changes on a particular collection
-----------------------------------------------

A change stream is created by calling the ``#watch`` method on a collection:

.. code-block:: ruby

  stream = collection.watch
  collection.insert_one(a: 1)
  doc = stream.to_enum.next
  process(doc)


You can also receive the notifications as they become available:

.. code-block:: ruby

  stream = client[:test].watch
  enum = stream.to_enum
  while doc = enum.next
    process(doc)
  end


The change stream can take filters in the aggregation framework pipeline
operator format:

.. code-block:: ruby

  stream = collection.watch([{'$match' => { 'operationType' => {'$in' => ['insert', 'replace'] } } },
                             {'$match' => { 'fullDocument.n' => { '$gte' => 1 } } }
                            ])
  enum = stream.to_enum
  while doc = enum.next
    process(doc)
  end

Close a Change Stream
---------------------

You can close a change stream by calling the ``#close`` method:

.. code-block:: ruby

  stream = collection.watch
  collection.insert_one(a: 1)
  doc = stream.to_enum.next
  process(doc)
  stream.close

Resuming a Change Stream
------------------------

The driver will automatically retry getMore operations on a change stream
once. Initial aggregation is never retried. In practical terms this means
that, for example:

- Calling ``collection.watch`` will fail if the cluster does not have
enough available nodes to satisfy the ``"majority"`` read preference;
- Once ``collection.watch`` successfully returns, if the cluster subsequently
experiences an election or loses a node, but heals quickly enough,
change stream reads via ``next`` or ``each`` methods will continue
transparently to the application.

If the cluster loses enough nodes to not be able to satisfy the ``"majority"``
read preference and does not heal quickly enough, ``next`` and ``each``
will raise an error. In these cases the application must track, via the
resume token, which documents from the change stream it has processed and
create a new change stream object via the ``watch`` call, passing an
appropriate ``:resume_after`` argument.
