.. _gridfs:

======
GridFS
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

GridFS is a MongoDB driver feature that allows storing arbitrarily large
files or blobs in the database. This is implemented by the driver
transparently chunking the blobs on writes and reassembling them on reads.
Both read and write operations support streaming of data.

.. note::

  On this page, "file" generally refers to a GridFS file rather than a file
  on the local filesystem. GridFS files consist of file metadata which
  includes the file name, and file contents split into chunks. When this page
  refers to files on a local filesystem, it uses the term "physical file".


The GridFS object ("Grid::FSBucket")
------------------------------------

To use GridFS, call the ``fs`` method on a database to obtain a
``Mongo::Grid::FSBucket`` obkect. The ``fs`` method supports the following
optional keyword arguments:

The options that ``Grid::FSBucket`` supports are:

.. list-table::
   :header-rows: 1
   :widths: 40 80

   * - Option
     - Description
   * - ``:bucket_name``
     - The name of the GridFS Bucket. Default is ``fs``.
   * - ``:fs_name``
     - The name of the GridFS Bucket. Takes precedence over ``bucket_name``.
       Default is ``fs``.
   * - ``:chunk_size``
     - Specifies the size of each file chunk in the database.
   * - ``:write_concern``
     - The write concern to use when uploading files. Please see the
       :ref:`Write Concern <write-concern>` section under CRUD operations
       for how to work with write concerns.
   * - ``:write``
     - Deprecated. Same as ``:write_concern``.
   * - ``:read``
     - The read preference to use when downloading files.


For example, you can create a GridFS bucket object with a particular read preference:

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], database: 'music')
  fs_bucket = client.database.fs( read: { mode: :secondary } )


Writing Files
-------------

To store a file in GridFS, create a ``Mongo::Grid::File`` object with the
contents of the file and the metadata, then use the ``insert_one`` method
to store the ``Mongo::Grid::File`` object in the database:

.. code-block:: ruby

  file = Mongo::Grid::File.new('file contents', filename: 'file-name.txt')
  fs_bucket.insert_one(file)

To store a physical file in GridFS, you might do something like:

.. code-block:: ruby

  path = '/path/to/file.txt'
  file = Mongo::Grid::File.new(File.read(path), filename: File.basename(path))
  fs_bucket.insert_one(file)

To store a blob in GridFS, you might do something like:

.. code-block:: ruby

  path = '/path/to/file.txt'
  file = Mongo::Grid::File.new('binary data...')
  fs_bucket.insert_one(file)

When a file is inserted, the ``file_id`` attribute of the ``Mongo::Grid::File``
object is populated with an ID of the inserted file. This ID is of type
``BSON::ObjectId``. Each file stored in GridFS has an ID. The file name is
optional; a file that was created without specifying a file name can still
be retrieved using its ID.

.. code-block:: ruby

  file.id
  # => BSON::ObjectId('5e9ccf35e1b8321195bad757')


path to the file Files can be stored in the database one at a time. File chunks are inserted
by default into the ``fs.chunks`` collection and file metadata is inserted
into the ``fs.files`` collection.

To insert into collections with a name prefix other than `fs`, access the
filesystem with a ``:fs_name`` option.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')
  file = Mongo::Grid::File.new('I am a file', :filename => 'new-file.txt')

  client.database.fs(:fs_name => 'grid').insert_one(file)

Note that the first time a file is inserted, it will create the required index
for you on the ``chunks`` collection. This index is a compound index:

.. code-block:: ruby

  { :files_id => 1, :n => 1 }

Files can also be streamed as an alternative to a direct insert.

.. code-block:: ruby

  client.database.fs.open_upload_stream(filename) do |stream|
    stream.write(file)
  end


Working with write streams
--------------------------

To upload a file to GridFS using a write stream, you can either open a stream
and write to it directly or write the entire contents of an ``IO`` object to
GridFS all at once.

To open an upload stream and write to it:

.. code-block:: ruby

  File.open('/path/to/my-file.txt', 'r') do |file|
    fs_bucket.open_upload_stream('my-file.txt') do |stream|
      stream.write(file)
    end
  end

To upload the entire contents of an IO object in one call:

.. code-block:: ruby

  File.open('/path/to/my-file.txt', 'r') do |file|
    fs_bucket.upload_from_stream('my-file.txt', file)
  end

Write streams support the following options:

.. list-table::
   :header-rows: 1
   :widths: 40 80

   * - Option
     - Description
   * - ``:chunk_size``
     - Specifies the size of each file chunk in the database.
   * - ``:write_concern``
     - The write concern to use when uploading files. Please see the
       :ref:`Write Concern <write-concern>` section under CRUD operations
       for how to work with write concerns.
   * - ``:write``
     - Deprecated. Same as ``:write_concern``.

The options can be provided as the last argument to the write stream methods:

.. code-block:: ruby

    fs_bucket.open_upload_stream('my-file.txt', write_concern: {w: 2}) do |stream|
      stream.write_concern
      # => #<Mongo::WriteConcern::Acknowledged:0x46980201422160 options={:w=>2}>
      
      # ...
    end

    fs_bucket.upload_from_stream('my-file.txt', file, write_concern: {w: 2})


Working with read streams
-------------------------

To download a file from GridFS using a read stream, you can either open a
read stream and read from it directly or download the entire file all at once.

To open a download stream and read from it:

.. code-block:: ruby

  File.open('/path/to/my-output-file.txt', 'w') do |file|
    fs_bucket.open_download_stream(file_id) do |stream|
      file.write(stream.read)
    end
  end

To download the file all at once and write it to an IO object:

.. code-block:: ruby

  File.open('/path/to/my-output-file.txt', 'w') do |file|
    fs_bucket.download_from_stream(file_id, file)
  end

You can also download a file specified by a name and (optionally)
revision number. Revision numbers are used to distinguish between files
sharing the same name, ordered by date of upload. The revision number passed to
``open_download_stream_by_name`` can be positive or negative.

.. code-block:: ruby

  File.open('/path/to/my-output-file.txt', 'w') do |file|
    fs_bucket.open_download_stream_by_name('my-file.txt', revision: -2) do |stream|
      file.write(stream.read)
    end
  end

To download the entire contents of the file specified by name and (optionally)
revision number:

.. code-block:: ruby

  File.open('/path/to/my-output-file.txt', 'w') do |file|
    fs_bucket.download_to_stream_by_name('my-file.txt', file, revision: -2)
  end

Read streams support the following options:

.. list-table::
   :header-rows: 1
   :widths: 40 80

   * - Option
     - Description
   * - ``:read``
     - The read preference to use when downloading files.

Some, but not all, of the read methods listed above pass these options to
the underlying read streams. Please consult the API documentation for each
method to determine whether it supports a particular option.

Finding file metadata
---------------------

You can retrieve documents containing metadata about files in the GridFS files collection.

.. code-block:: ruby

  fs_bucket.find(filename: 'my-file.txt')

Deleting files
--------------

You can delete a file by id.

.. code-block:: ruby

  fs_bucket.delete(file_id)


Working with Grid::File objects
-------------------------------

This object can be used to wrap a file to be inserted into the database using
GridFS and the object that is retrieved.

To create a file with raw data:

.. code-block:: ruby

  file = Mongo::Grid::File.new('I am a file', :filename => 'new-file.txt')

To create a file from a Ruby ``File`` object:

.. code-block:: ruby

  file = File.open('/path/to/my-file.txt')
  grid_file = Mongo::Grid::File.new(file.read, :filename => File.basename(file.path))

To change file options such as chunk size, pass options to the constructor:

.. code-block:: ruby

  file = File.open('/path/to/my-file.txt')
  grid_file = Mongo::Grid::File.new(
    file.read,
    :filename => File.basename(file.path),
    :chunk_size => 1024
  )

The following is a full list of the available options that files support.

.. list-table::
   :header-rows: 1
   :widths: 40 80

   * - Option
     - Description
   * - ``:chunk_size``
     - Sets the size of each file chunk in the database.
   * - ``:content_type``
     - Set a content type for the file.
   * - ``:filename`` (Required)
     - The file name.
   * - ``:upload_date``
     - The date the file was uploaded (stored).

Finding Files
-------------

To retrieve a file from the database, call ``find_one`` with the appropriate filter.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')
  client.database.fs.find_one(:filename => 'new-file.txt') # Returns a Mongo::Grid::File

Files can also be streamed as an alternative to a direct find.

.. code-block:: ruby

  client.database.fs.open_download_stream(file_id) do |stream|
    io.write(stream.read)
  end

  fs.download_to_stream(file_id, io)


Deleting Files
--------------

To delete a file, pass the file object to ``delete_one``.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')
  fs = client.database.fs
  file = fs.find_one(:filename => 'new-file.txt')
  fs.delete_one(file)
