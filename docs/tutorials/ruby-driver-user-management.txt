===============
User Management
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

[introduction here]

Creating a user
```````````````
There are two ways to create a new database user with the Ruby Driver.

The simplest way to create a new user is to use the ``create`` method, passing in a username,
password, and roles:

.. code-block:: ruby

  client.database.users.create(
    'alanturing',
    password: 'enigma',
    roles: [ Mongo::Auth::Roles::READWRITE ]
  )

Another way to create a user is to first create a ``Mongo::Auth::User`` object with all the
user information and then pass that object into the ``create`` method in lieu of a username.

.. code-block:: ruby

  user = Mongo::User.new({
    user: 'alanturing',
    password: 'enigma',
    roles: [ Mongo::Auth::Roles::READWRITE ]
  })

  client.database.users.create(user)

The ``create`` method takes a ``Hash`` of options as an optional second argument.
The ``:roles`` option allows you to grant your user permissions on your MongoDB instance.
For example, the Mongo::Auth::Roles::READ_WRITE role grants the user the ability to both
read from and write to the database in which they were created. Each role can be specified
as a ``String`` or as a ``Hash``. If you would like to grant permissions to a user on a database
other than the one on which they were created, you can pass that database name in the role hash:

.. code-block:: ruby

  client.database.users.create(
    'alanturing',
    password: 'enigma',
    roles: [{ role: Mongo::Auth::Roles::READWRITE, db: 'machines' }]
  )

In this example, the user `alanturing` has permission to read and write on the `machines` database. For
more information about roles in MongoDB, see the  :manual:`Built-in roles</reference/built-in-roles/>`
documentation.

In addition to the ``:roles`` option, the ``create`` method supports a ``:session`` option,
which allows you to specify a ``Mongo::Session`` object to use for this operation,
as well as a ``:write_concern`` option, which represents the write concern of this operation
when performed on a replica set.

.. seealso::
  :manual:`Write Concerns</core/replica-set-write-concern/>`,
  :ref:`Sessions<sessions>`,
  :manual:`Built-in roles</reference/built-in-roles/>`

User Info
`````````
To view information about a user that has already been created
in the database, use the ``info`` method:

.. code-block:: ruby

  client.database.users.info('alanturing')

If the user exists, this method will return an ``Array`` object
containing a ``Hash`` with information about the user, such as
their id, username, the database they were created on, and their
roles. If the user doesn't exist, this method will return an
empty Array.

The ``info`` method also takes an optional ``Hash`` of options
as a second argument. Currently, the only supported option is ``:session``,
which allows you to specify a ``Mongo::Session`` object to use for this
operation.

The Ruby Driver does not have a method that lists all of the users
that currently exist on a database.

.. seealso::
  :ref:`Sessions <sessions>`

Updating a user
```````````````
To update a user that already exists in the database, you may use the ``update`` method in
one of two ways. The first way is to specify the name of the user you wish to update,
and a new set of options.

.. warning::

  You must include all user options in the options ``Hash``, even those options that
  will remain the same. Omitting an option is the same as setting it to an empty value.

.. code-block:: ruby

  client.database.users.update(
    'alanturing',
    roles: [ Mongo::Auth::Roles::READ_WRITE ]
    password: 'turing-test'
  )

The second way to update a user is to pass an updated ``Mongo::Auth::User`` object
to the ``update`` method in lieu of a username.

.. code-block:: ruby

  user = Mongo::Auth::User.new({
    user: 'alanturing',
    roles: [ Mongo::Auth::Roles::READ_WRITE ],
    password: 'turing-test'
  })

  client.database.users.update(user)

Optionally, the ``update`` method takes a ``Hash`` of options as a second argument.
The two possible options for this method are ``:session``, which allows you to specify
a ``Mongo::Session`` object on which to perform this operation, and ``:write_concern``,
which sets a write concern if this operation is performed on a replica set.

.. seealso::
  :manual:`Write Concerns</core/replica-set-write-concern/>`,
  :ref:`Sessions<sessions>`

Removing users
``````````````
To remove a user from the database, use the ``remove`` method:

.. code-block:: ruby

  client.database.users.remove('alanturing')

You may pass a ``Hash`` of options as a second argument. The two supported
options for the ``remove`` method are ``:session`` and ``:write_concern``.
``:session`` allows you to specify a ``Mongo::Session`` object to use for
this operation. ``:write_concern`` specifies the write concern
of the operation if you are running this command against a replica set.

.. code-block:: ruby

  client.database.users.remove('alanturing', { w: "majority" , wtimeout: 5000 })

This method will return a ``Mongo::Operation::Result`` document
indicating whether the operation has been performed successfully.

The Ruby Driver does not implement a method for removing all users
from a database.

.. seealso::
  :manual:`Write Concerns</core/replica-set-write-concern/>`,
  :ref:`Sessions<sessions>`

