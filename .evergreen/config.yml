# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever.
# 45 minutes is the longest we'll ever run
exec_timeout_secs: 2700

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        true

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"

  "fetch egos":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          set -ex
          
          curl -sfLo egos https://raw.githubusercontent.com/p-mongo/egos/master/egos
          chmod +x ./egos

  "create expansions":
    # Make an evergreen expansion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          # Get the current unique version of this checkout
          if [ "${is_patch}" = "true" ]; then
            CURRENT_VERSION=$(git describe)-patch-${version_id}
          else
            CURRENT_VERSION=latest
          fi

          export DRIVERS_TOOLS="$(pwd)/../drivers-tools"

          # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
            export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
          fi

          export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
          export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
          export UPLOAD_BUCKET="${project}"
          export PROJECT_DIRECTORY="$(pwd)"

          cat <<EOT > expansion.yml
          CURRENT_VERSION: "$CURRENT_VERSION"
          DRIVERS_TOOLS: "$DRIVERS_TOOLS"
          MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
          MONGODB_BINARIES: "$MONGODB_BINARIES"
          UPLOAD_BUCKET: "$UPLOAD_BUCKET"
          PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
          PREPARE_SHELL: |
            set -o errexit
            #set -o xtrace
            export DRIVERS_TOOLS="$DRIVERS_TOOLS"
            export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
            export MONGODB_BINARIES="$MONGODB_BINARIES"
            export UPLOAD_BUCKET="$UPLOAD_BUCKET"
            export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

            export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
            export PATH="$MONGODB_BINARIES:$PATH"
            export PROJECT="${project}"

            export AUTH=${AUTH}
            export SSL=${SSL}
            export TOPOLOGY=${TOPOLOGY}
            export COMPRESSOR=${COMPRESSOR}
            export RVM_RUBY="${RVM_RUBY}"
            export MONGODB_VERSION=${MONGODB_VERSION}
            export FCV=${FCV}
            export MONGO_RUBY_DRIVER_LINT=${LINT}
            export RETRY_READS=${RETRY_READS}
            export RETRY_WRITES=${RETRY_WRITES}
            export WITH_ACTIVE_SUPPORT="${WITH_ACTIVE_SUPPORT}"
            export SINGLE_MONGOS="${SINGLE_MONGOS}"
            export BSON="${BSON}"
            export MMAPV1="${MMAPV1}"
            export FLE="${FLE}"

            export STRESS_SPEC=true
          EOT

          # See what we've done
          cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current
    # unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "export AWS auth credentials":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          cat <<EOT > .env.private
          IAM_AUTH_ASSUME_AWS_ACCOUNT="${iam_auth_assume_aws_account}"
          IAM_AUTH_ASSUME_AWS_SECRET_ACCESS_KEY="${iam_auth_assume_aws_secret_access_key}"
          IAM_AUTH_ASSUME_ROLE_NAME="${iam_auth_assume_role_name}"
          IAM_AUTH_EC2_INSTANCE_ACCOUNT="${iam_auth_ec2_instance_account}"
          IAM_AUTH_EC2_INSTANCE_PROFILE="${iam_auth_ec2_instance_profile}"
          IAM_AUTH_EC2_INSTANCE_SECRET_ACCESS_KEY="${iam_auth_ec2_instance_secret_access_key}"
          IAM_AUTH_ECS_ACCOUNT="${iam_auth_ecs_account}"
          IAM_AUTH_ECS_ACCOUNT_ARN="${iam_auth_ecs_account_arn}"
          IAM_AUTH_ECS_CLUSTER="${iam_auth_ecs_cluster}"
          IAM_AUTH_ECS_SECRET_ACCESS_KEY="${iam_auth_ecs_secret_access_key}"
          IAM_AUTH_ECS_SECURITY_GROUP="${iam_auth_ecs_security_group}"
          IAM_AUTH_ECS_SUBNET_A="${iam_auth_ecs_subnet_a}"
          IAM_AUTH_ECS_SUBNET_B="${iam_auth_ecs_subnet_b}"
          IAM_AUTH_ECS_TASK_DEFINITION="${iam_auth_ecs_task_definition}"
          EOT

  "export FLE AWS credentials":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          cat <<EOT > .env.private
          MONGO_RUBY_DRIVER_AWS_KEY="${fle_aws_key}"
          MONGO_RUBY_DRIVER_AWS_SECRET="${fle_aws_secret}"
          MONGO_RUBY_DRIVER_AWS_REGION="${fle_aws_region}"
          MONGO_RUBY_DRIVER_AWS_ARN="${fle_aws_arn}"
          MONGO_RUBY_DRIVER_MONGOCRYPTD_PORT="${fle_mongocryptd_port}"
          EOT

  "export Kerberos credentials":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          cat <<EOT > .env.private
          SASL_HOST=${sasl_host}
          SASL_PORT=${sasl_port}
          SASL_USER=${sasl_user}
          SASL_PASS=${sasl_pass}
          SASL_DB=${sasl_db}
          PRINCIPAL=${principal}
          KERBEROS_DB=${kerberos_db}
          KEYTAB_BASE64=${keytab_base64}
          EOT

  "exec script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          sh ${PROJECT_DIRECTORY}/${file}

  "upload mo artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log\* | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"
    - command: archive.targz_pack
      params:
        target: "drivers-dir.tar.gz"
        source_dir: ${DRIVERS_TOOLS}
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-drivers-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-dir.tar.gz"

  "upload test results to s3":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        # src is the relative path to repo checkout,
        # This is specified in this yaml file earlier.
        local_file: ./src/tmp/rspec.json
        display_name: rspec.json
        remote_file: ${UPLOAD_BUCKET}/${version_id}/${build_id}/artifacts/${build_variant}/rspec.json
        content_type: application/json
        permissions: public-read
        bucket: mciuploads
    # AWS does not appear to support on-the-fly gzip encoding; compress
    # the results manually and upload a compressed file.
    # Typical size reduction: 50 MB -> 800 KB
    - command: shell.exec
      params:
        script: |
          gzip <src/tmp/rspec.json >src/tmp/rspec.json.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        # src is the relative path to repo checkout,
        # This is specified in this yaml file earlier.
        local_file: ./src/tmp/rspec.json.gz
        display_name: rspec.json.gz
        remote_file: ${UPLOAD_BUCKET}/${version_id}/${build_id}/artifacts/${build_variant}/rspec.json.gz
        content_type: application/gzip
        permissions: public-read
        bucket: mciuploads
    - command: shell.exec
      params:
        script: |
          xz -9 <src/tmp/rspec.json >src/tmp/rspec.json.xz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        # src is the relative path to repo checkout,
        # This is specified in this yaml file earlier.
        local_file: ./src/tmp/rspec.json.xz
        display_name: rspec.json.xz
        remote_file: ${UPLOAD_BUCKET}/${version_id}/${build_id}/artifacts/${build_variant}/rspec.json.xz
        content_type: application/x-xz
        permissions: public-read
        bucket: mciuploads

  "upload test results":
    - command: attach.xunit_results
      params:
        file: ./src/tmp/rspec.xml

  "delete private environment":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: "src"
        script: |
          rm -f .env.private

  "build and test docker image":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          set -x
          ./egos .evergreen/test-on-docker -d ${os} MONGODB_VERSION=${mongodb-version} TOPOLOGY=${topology} RVM_RUBY=${ruby} -s .evergreen/run-tests.sh TEST_CMD=true ${PRELOAD_ARG}

  "run tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          ./egos .evergreen/run-tests.sh

  "run AWS auth tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          ./egos .evergreen/run-tests-aws-auth.sh

  "run Kerberos unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          ./egos .evergreen/run-tests-kerberos-unit.sh

  "run Kerberos integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          ./egos .evergreen/run-tests-kerberos-integration.sh

pre:
  - func: "fetch source"
  - func: "fetch egos"
  - func: "create expansions"

post:
  - func: "delete private environment"
  # Removed, causing timeouts
  # - func: "upload working dir"
  - func: "upload mo artifacts"
  #- func: "upload test results"
  - func: "upload test results to s3"

tasks:

    - name: "test-docker"
      commands:
        - func: "build and test docker image"
    - name: "test-mlaunch"
      commands:
        - func: "run tests"
    - name: "test-kerberos-integration"
      commands:
        - func: "export Kerberos credentials"
        - func: "run Kerberos integration tests"
    - name: "test-kerberos"
      commands:
        - func: "run Kerberos unit tests"
    - name: "test-fle"
      commands:
        - func: "export FLE AWS credentials"
        - func: "run tests"
    - name: "test-aws-auth"
      commands:
        - func: "export AWS auth credentials"
        - func: "run AWS auth tests"

axes:

  - id: preload
    display_name: Preload server
    values:
      - id: nopreload
        display_name: Do not preload
      - id: preload
        display_name: Preload
        variables:
          PRELOAD_ARG: -p

  - id: "mongodb-version"
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
          MONGODB_VERSION: "latest"
      - id: "4.4"
        display_name: "4.4"
        variables:
          # Until 4.4.0 RC0 ships, we use 4.3.x versions.
          MONGODB_VERSION: "4.3"
      - id: "4.2"
        display_name: "4.2"
        variables:
          MONGODB_VERSION: "4.2"
      - id: "4.0"
        display_name: "4.0"
        variables:
          MONGODB_VERSION: "4.0"
      - id: "3.6"
        display_name: "3.6"
        variables:
          MONGODB_VERSION: "3.6"
      - id: "3.4"
        display_name: "3.4"
        variables:
          MONGODB_VERSION: "3.4"
      - id: "3.2"
        display_name: "3.2"
        variables:
          MONGODB_VERSION: "3.2"
      - id: "3.0"
        display_name: "3.0"
        variables:
          MONGODB_VERSION: "3.0"
      - id: "2.6"
        display_name: "2.6"
        variables:
          MONGODB_VERSION: "2.6"

  - id: fcv
    display_name: FCV
    values:
      - id: '3.4'
        display_name: '3.4'
        variables:
          FCV: '3.4'

  - id: "topology"
    display_name: Topology
    values:
      - id: "standalone"
        display_name: Standalone
        variables:
          TOPOLOGY: standalone
      - id: "replica-set"
        display_name: Replica Set
        variables:
          TOPOLOGY: replica-set
      - id: "sharded-cluster"
        display_name: Sharded
        variables:
          TOPOLOGY: sharded-cluster

  - id: "single-mongos"
    display_name: Single Mongos
    values:
      - id: "single-mongos"
        display_name: Single Mongos
        variables:
          SINGLE_MONGOS: 'true'

  - id: "auth-and-ssl"
    display_name: Authentication and SSL
    values:
      - id: "auth-and-ssl"
        display_name: Auth SSL
        variables:
          AUTH: "auth"
          SSL: "ssl"
      - id: "auth-and-nossl"
        display_name: Auth NoSSL
        variables:
          AUTH: "auth"
      - id: "noauth-and-ssl"
        display_name: NoAuth SSL
        variables:
          SSL: "ssl"
      - id: "noauth-and-nossl"
        display_name: NoAuth NoSSL
      - id: "x509"
        display_name: X.509
        variables:
          AUTH: "x509"
          SSL: "ssl"
      - id: kerberos
        display_name: Kerberos
        variables:
          AUTH: kerberos
      - id: aws-regular
        display_name: AWS Auth Regular Credentials
        variables:
          AUTH: aws-regular
      - id: aws-assume-role
        display_name: AWS Auth Assume Role
        variables:
          AUTH: aws-assume-role
      - id: aws-ec2
        display_name: AWS Auth EC2 Role
        variables:
          AUTH: aws-ec2
      - id: aws-ecs
        display_name: AWS Auth ECS Task
        variables:
          AUTH: aws-ecs

  - id: "ruby"
    display_name: Ruby Version
    values:
      - id: "ruby-2.7"
        display_name: ruby-2.7
        variables:
          RVM_RUBY: "ruby-2.7"
      - id: "ruby-2.6"
        display_name: ruby-2.6
        variables:
          RVM_RUBY: "ruby-2.6"
      - id: "ruby-2.5"
        display_name: ruby-2.5
        variables:
          RVM_RUBY: "ruby-2.5"
      - id: "ruby-2.4"
        display_name: ruby-2.4
        variables:
          RVM_RUBY: "ruby-2.4"
      - id: "ruby-2.3"
        display_name: ruby-2.3
        variables:
          RVM_RUBY: "ruby-2.3"
      - id: "ruby-head"
        display_name: ruby-head
        variables:
          RVM_RUBY: "ruby-head"
      - id: "jruby-9.2"
        display_name: jruby-9.2
        variables:
          RVM_RUBY: "jruby-9.2"

  - id: "os"
    display_name: OS
    values:
      - id: ubuntu1804
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-test
      - id: ubuntu1604
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-test
      - id: ubuntu1404
        display_name: "Ubuntu 14.04"
        run_on: ubuntu1404-test
      - id: rhel70
        display_name: "RHEL 7"
        run_on: rhel70-small
      - id: rhel62
        display_name: "RHEL 6"
        run_on: rhel62-small

  - id: "compressor"
    display_name: Compressor
    values:
      - id: "zlib"
        display_name: Zlib
        variables:
          COMPRESSOR: "zlib"

  - id: retry-reads
    display_name: Retry Reads
    values:
      - id: no-retry-reads
        display_name: No Retry Reads
        variables:
          RETRY_READS: 'false'

  - id: retry-writes
    display_name: Retry Writes
    values:
      - id: no-retry-writes
        display_name: No Retry Writes
        variables:
          RETRY_WRITES: 'false'

  - id: lint
    display_name: Lint
    values:
      - id: on
        display_name: On
        variables:
          LINT: '1'

  - id: "as"
    display_name: ActiveSupport
    values:
      - id: "as"
        display_name: AS
        variables:
          WITH_ACTIVE_SUPPORT: true

  - id: bson
    display_name: BSON
    values:
      - id: master
        display_name: master
        variables:
          BSON: master
      - id: min
        display_name: min
        variables:
          BSON: min

  - id: storage-engine
    display_name: Storage Engine
    values:
      - id: mmapv1
        display_name: MMAPv1
        run_on: ubuntu1604-test
        variables:
          MMAPV1: 'true'

  - id: "fle"
    display_name: FLE
    values:
      - id: "fle"
        display_name: FLE
        variables:
          FLE: true

buildvariants:
  - matrix_name: "docker"
    matrix_spec:
      ruby: "ruby-2.7"
      mongodb-version: "4.2"
      topology: standalone
      os: ubuntu1604
      preload: preload
    display_name: "Docker ${os} ${mongodb-version} ${topology} ${ruby} ${preload}"
    tasks:
      - name: "test-docker"
  
  - matrix_name: "docker"
    matrix_spec:
      ruby: "ruby-2.7"
      mongodb-version: "4.2"
      topology: standalone
      os: ubuntu1604
      preload: nopreload
    display_name: "Docker ${os} ${mongodb-version} ${topology} ${ruby} ${preload}"
    tasks:
      - name: "test-docker"

  - matrix_name: "mongo-4.2"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: ["ruby-2.7", "ruby-2.3"]
      mongodb-version: ['4.2']
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-4.0"
    matrix_spec:
      auth-and-ssl: ["noauth-and-ssl", "auth-and-nossl"]
      ruby: "ruby-2.6"
      mongodb-version: ['4.0']
      topology: "*"
      os: rhel70
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-3.6"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.5"
      mongodb-version: ['3.6']
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-3.4"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.4"
      mongodb-version: ['3.4']
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-3.2"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.3"
      mongodb-version: ['3.2']
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-3.0"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.7"
      mongodb-version: ['3.0']
      topology: "*"
      os: ubuntu1404
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-2.6"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.6"
      mongodb-version: ['2.6']
      topology: "*"
      os: ubuntu1404
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "mongo-4.4"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.7"
      mongodb-version: '4.4'
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "single-mongos"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: "ruby-2.6"
      mongodb-version: ['4.0', '4.2', '4.4']
      topology: "sharded-cluster"
      single-mongos: single-mongos
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} single-mongos ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "no-retry-reads"
    matrix_spec:
      retry-reads: no-retry-reads
      ruby: "ruby-2.6"
      mongodb-version: ["4.0"]
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${retry-reads} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "no-retry-writes"
    matrix_spec:
      retry-writes: no-retry-writes
      ruby: "ruby-2.7"
      mongodb-version: ["4.0"]
      topology: [replica-set, sharded-cluster]
      os: rhel70
    display_name: "${mongodb-version} ${topology} ${retry-writes} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: mmapv1
    matrix_spec:
      ruby: "ruby-2.5"
      mongodb-version: ['3.4', '3.6', '4.0']
      topology: '*'
      storage-engine: mmapv1
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} mmapv1 ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "lint"
    matrix_spec:
      lint: on
      ruby: "ruby-2.6"
      mongodb-version: ["4.2"]
      topology: '*'
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${lint} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "x509-tests"
    matrix_spec:
      auth-and-ssl: "x509"
      ruby: "ruby-2.6"
      mongodb-version: "4.2"
      topology: standalone
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "jruby-auth"
    matrix_spec:
      auth-and-ssl: "auth-and-ssl"
      ruby: "jruby-9.2"
      mongodb-version: "4.2"
      topology: "*"
      os: rhel70
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "jruby-noauth"
    matrix_spec:
      auth-and-ssl: "noauth-and-nossl"
      ruby: "jruby-9.2"
      mongodb-version: "2.6"
      topology: "*"
      os: rhel62
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "zlib-auth"
    matrix_spec:
      auth-and-ssl: "auth-and-ssl"
      ruby: "ruby-2.7"
      mongodb-version: "4.2"
      topology: "*"
      compressor: 'zlib'
      os: ubuntu1604
    display_name: "${compressor} ${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "zlib-noauth"
    matrix_spec:
      auth-and-ssl: "noauth-and-nossl"
      ruby: "ruby-2.3"
      mongodb-version: "3.6"
      topology: replica-set
      compressor: 'zlib'
      os: ubuntu1604
    display_name: "${compressor} ${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "ruby-head"
    matrix_spec:
      auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
      ruby: ["ruby-head"]
      mongodb-version: "4.2"
      topology: "*"
      os: ubuntu1604
    display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "activesupport"
    matrix_spec:
      ruby: ruby-2.6
      mongodb-version: '4.2'
      topology: replica-set
      as: as
      os: ubuntu1604
    display_name: "AS ${mongodb-version} ${topology} ${ruby}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "bson"
    matrix_spec:
      ruby: [ruby-2.6, jruby-9.2]
      mongodb-version: '4.2'
      topology: replica-set
      bson: "*"
      os: rhel70
    display_name: "AS ${mongodb-version} ${topology} ${ruby} ${bson}"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "3.6-with-3.4-fcv"
    matrix_spec:
      fcv: '3.4'
      ruby: ["ruby-2.5"]
      mongodb-version: '3.6'
      topology: replica-set
      os: ubuntu1604
    display_name: "3.6 Replica Set with 3.4 FCV"
    tasks:
      - name: "test-mlaunch"

  - matrix_name: "kerberos-integration-ubuntu"
    matrix_spec:
      # Other Rubies segfault
      ruby: [ruby-2.5, ruby-2.4]
    display_name: "Kerberos integration Ubuntu ${ruby}"
    run_on:
      - ubuntu1604-test
    tasks:
      - name: "test-kerberos-integration"

  - matrix_name: "kerberos-integration-rhel"
    matrix_spec:
      # Other Rubies segfault
      ruby: [ruby-2.7, ruby-2.3]
      os: rhel70
    display_name: "Kerberos integration RHEL ${ruby} ${os}"
    tasks:
      - name: "test-kerberos-integration"

  # Kerberos integration tests on debian are omitted due to segfaults:
  # https://jira.mongodb.org/browse/RUBY-1534

  - matrix_name: "kerberos-unit"
    matrix_spec:
      auth-and-ssl: "noauth-and-nossl"
      ruby: "ruby-2.6"
      mongodb-version: "4.2"
      topology: standalone
      os: rhel70
      auth-and-ssl: kerberos
    display_name: "Kerberos Tests"
    tasks:
      - name: "test-kerberos"

  - matrix_name: "fle-4.2"
    matrix_spec:
      auth-and-ssl: "noauth-and-nossl"
      ruby: [ruby-2.7, ruby-2.3, jruby-9.2]
      topology: [standalone, replica-set, sharded-cluster]
      mongodb-version: ["4.2"]
      os: rhel70
      fle: fle
    display_name: "FLE: ${topology} ${mongodb-version} ${ruby}"
    tasks:
      - name: "test-fle"

  - matrix_name: "fle-4.0"
    matrix_spec:
      auth-and-ssl: "noauth-and-nossl"
      ruby: [ruby-2.6, jruby-9.2]
      topology: standalone
      mongodb-version: ["4.0"]
      os: rhel70
      fle: fle
    display_name: "FLE: ${mongodb-version} ${ruby}"
    tasks:
      - name: "test-fle"

  - matrix_name: "fle-4.4"
    matrix_spec:
      auth-and-ssl: "noauth-and-nossl"
      ruby: [ruby-2.7]
      topology: standalone
      mongodb-version: ['4.4']
      os: rhel70
      fle: fle
    display_name: "FLE: ${mongodb-version} ${ruby}"
    tasks:
      - name: "test-fle"

  - matrix_name: aws-auth-regular
    matrix_spec:
      auth-and-ssl: aws-regular
      ruby: [ruby-2.7]
      topology: standalone
      mongodb-version: '4.4'
      os: ubuntu1804
    display_name: "AWS auth regular: ${mongodb-version} ${ruby}"
    tasks:
      - name: "test-aws-auth"

  - matrix_name: aws-auth-temporary
    matrix_spec:
      auth-and-ssl: [aws-assume-role, aws-ec2, aws-ecs]
      ruby: [ruby-2.7]
      topology: standalone
      mongodb-version: '4.4'
      os: ubuntu1804
    display_name: "AWS auth temporary: ${auth-and-ssl} ${mongodb-version} ${ruby}"
    tasks:
      - name: "test-aws-auth"
