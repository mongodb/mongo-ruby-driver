########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"

  "create expansions":
    # Make an evergreen expansion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"
           export PROJECT_DIRECTORY="$(pwd)"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export DRIVERS_TOOLS="$DRIVERS_TOOLS"
              export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
              export MONGODB_BINARIES="$MONGODB_BINARIES"
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
              export PATH="$MONGODB_BINARIES:$PATH"
              export PROJECT="${project}"

              export AUTH=${AUTH}
              export SSL=${SSL}
              export TOPOLOGY=${TOPOLOGY}
              export RVM_RUBY="${RVM_RUBY}"
              export MONGODB_VERSION=${VERSION}
              export FCV=${FCV}
              export MONGO_RUBY_DRIVER_LINT=${LINT}
              export RETRY_READS=${RETRY_READS}
              export RETRY_WRITES=${RETRY_WRITES}
              export WITH_ACTIVE_SUPPORT="${WITH_ACTIVE_SUPPORT}"
              export SINGLE_MONGOS="${SINGLE_MONGOS}"
              export MMAPV1="${MMAPV1}"

              export STRESS_SPEC=true
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ $DRIVERS_TOOLS
          else
            git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          fi
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  "exec script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          [ -f ${PROJECT_DIRECTORY}/${file} ] && sh ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "upload docs" :
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/doc/html s3://mciuploads/${UPLOAD_BUCKET}/docs/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/doc/html/index.html
        remote_file: ${UPLOAD_BUCKET}/docs/${CURRENT_VERSION}/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Rendered docs"

  "upload coverage" :
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/coverage s3://mciuploads/${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/coverage/index.html
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report"

  "upload mo artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${DRIVERS_TOOLS}/.evergreen/orchestration/server.log
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"
    - command: archive.targz_pack
      params:
        target: "drivers-dir.tar.gz"
        source_dir: ${DRIVERS_TOOLS}
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-drivers-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-dir.tar.gz"

  "upload test results to s3":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        # src is the relative path to repo checkout,
        # This is specified in this yaml file earlier.
        local_file: ./src/tmp/rspec.json
        display_name: rspec.json
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-rspec.json
        content_type: application/json
        permissions: public-read
        bucket: mciuploads

  "upload test results":
    - command: attach.xunit_results
      params:
        file: ./src/tmp/rspec.xml

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} AUTH=${AUTH} SSL=${SSL} sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "run tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          MONGODB_URI="${MONGODB_URI}" .evergreen/run-tests.sh

  "run tests via mlaunch":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          MONGODB_URI="${MONGODB_URI}" .evergreen/run-tests-mlaunch.sh

  "run tests with kerberos":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          KERBEROS_REQUIRED=1 .evergreen/run-tests-with-kerberos.sh

  "run tests with X.509 authentication":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/run-x509-tests.sh
  
  "run field level encryption tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          MONGODB_URI="${MONGODB_URI}" .evergreen/run-fle-tests.sh

  "run local tls tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          MONGODB_URI="${MONGODB_URI}" .evergreen/run-local-tls-tests.sh

  "run enterprise auth tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
            # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
            case "$OS" in
              cygwin*)
                 IP_ADDR=`getent hosts ${sasl_host} | head -n 1 | awk '{print $1}'`
                 ;;

              darwin)
                 IP_ADDR=`dig ${sasl_host} +short | tail -1`
                 ;;

              *)
                 IP_ADDR=`getent hosts ${sasl_host} | head -n 1 | awk '{print $1}'`
            esac

            KERBEROS_REQUIRED=1 IP_ADDR=$IP_ADDR SASL_HOST=${sasl_host} SASL_PORT=${sasl_port} SASL_USER=${sasl_user} SASL_PASS=${sasl_pass} SASL_DB=${sasl_db} PRINCIPAL=${principal} KERBEROS_DB=${kerberos_db} KEYTAB_BASE64=${keytab_base64} PROJECT_DIRECTORY=${PROJECT_DIRECTORY} RVM_RUBY="${RVM_RUBY}" ${PROJECT_DIRECTORY}/.evergreen/run-enterprise-auth-tests.sh

  "cleanup mo":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          cd "$MONGO_ORCHESTRATION_HOME"
          # source the mongo-orchestration virtualenv if it exists
          if [ -f venv/bin/activate ]; then
            . venv/bin/activate
          elif [ -f venv/Scripts/activate ]; then
            . venv/Scripts/activate
          fi
          mongo-orchestration stop

  "cleanup mo if running":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          cd "$MONGO_ORCHESTRATION_HOME"
          # source the mongo-orchestration virtualenv if it exists
          if [ -f venv/bin/activate ]; then
            . venv/bin/activate
          elif [ -f venv/Scripts/activate ]; then
            . venv/Scripts/activate
          fi
          mongo-orchestration stop || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done

  "make files executable":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "init test-results":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          echo '{"results": [{ "status": "FAIL", "test_file": "Build", "log_raw": "No test-results.json found was created"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          file="${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh"
          [ -f $file ] && sh $file || echo "$file not available, skipping"

pre:
  - func: "fetch source"
  - func: "create expansions"
  - func: "prepare resources"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "init test-results"
  - func: "make files executable"
  - func: "install dependencies"

post:
  # Removed, causing timeouts
  # - func: "upload working dir"
  - func: "upload mo artifacts"
  #- func: "upload test results"
  - func: "upload test results to s3"
  - func: "cleanup mo if running"

tasks:

    - name: "test"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run tests"
        #- func: "cleanup mo"
    - name: "test-mlaunch"
      commands:
        - func: "run tests via mlaunch"
    - name: "local-tls-tests"
      commands:
        - func: "run local tls tests"
    - name: "enterprise-auth-tests"
      commands:
        - func: "run enterprise auth tests"
    - name: "kerberos-tests"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run tests with kerberos"
    - name: "x509-tests"
      commands:
        - func: "run tests with X.509 authentication"
    - name: "fle-tests"
      commands:
        - func: "bootstrap mongo-orchestration"
        - func: "run field level encryption tests"

axes:
  - id: "mongodb-version"
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           VERSION: "latest"
      - id: "4.0"
        display_name: "4.0"
        variables:
          VERSION: "4.0"
      - id: "4.2"
        display_name: "4.2"
        variables:
          VERSION: "4.2"
      - id: "3.6"
        display_name: "3.6"
        variables:
           VERSION: "3.6"
      - id: "3.4"
        display_name: "3.4"
        variables:
           VERSION: "3.4"
      - id: "3.2"
        display_name: "3.2"
        variables:
           VERSION: "3.2"
      - id: "3.0"
        display_name: "3.0"
        variables:
           VERSION: "3.0"
      - id: "2.6"
        display_name: "2.6"
        variables:
           VERSION: "2.6"
  - id: fcv
    display_name: FCV
    values:
      - id: '3.4'
        display_name: '3.4'
        variables:
          FCV: '3.4'

  - id: "topology"
    display_name: Topology
    values:
      - id: "standalone"
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: "replica-set"
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: "sharded-cluster"
        display_name: Sharded
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: "auth-and-ssl"
    display_name: Authentication and SSL
    values:
      - id: "auth-and-ssl"
        display_name: Auth SSL
        variables:
           AUTH: "auth"
           SSL: "ssl"
      - id: "auth-and-nossl"
        display_name: Auth NoSSL
        variables:
           AUTH: "auth"
           SSL: "nossl"
      - id: "noauth-and-ssl"
        display_name: NoAuth SSL
        variables:
           AUTH: "noauth"
           SSL: "ssl"
      - id: "noauth-and-nossl"
        display_name: NoAuth NoSSL
        variables:
           AUTH: "noauth"
           SSL: "nossl"
  - id: "ruby"
    display_name: Ruby Version
    # Local TLS tests run on all Ruby versions, thus no versions should be
    # listed here (uncommented) that are not supported.
    values:
      - id: "ruby-2.3"
        display_name: ruby-2.3
        variables:
           RVM_RUBY: "ruby-2.3"
      - id: "ruby-2.4"
        display_name: ruby-2.4
        variables:
           RVM_RUBY: "ruby-2.4"
      - id: "ruby-2.5"
        display_name: ruby-2.5
        variables:
           RVM_RUBY: "ruby-2.5"
      - id: "ruby-2.6"
        display_name: ruby-2.6
        variables:
           RVM_RUBY: "ruby-2.6"
      - id: "ruby-head"
        display_name: ruby-head
        variables:
           RVM_RUBY: "ruby-head"
      - id: "jruby-9.2"
        display_name: jruby-9.2
        variables:
           RVM_RUBY: "jruby-9.2"
  - id: "os"
    display_name: OS
    values:
      - id: ubuntu1404
        display_name: "Ubuntu 14.04"
        run_on: ubuntu1404-test
      - id: ubuntu1604
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-test
      - id: rhel70
        display_name: "RHEL 7.0"
        run_on: rhel70-small
  - id: "compressor"
    display_name: Compressor
    values:
      - id: "zlib"
        display_name: Zlib
        variables:
           COMPRESSOR: "zlib"
  - id: retry-reads
    display_name: Retry Reads
    values:
      - id: no-retry-reads
        display_name: No Retry Reads
        variables:
          RETRY_READS: 'false'
  - id: retry-writes
    display_name: Retry Writes
    values:
      - id: no-retry-writes
        display_name: No Retry Writes
        variables:
          RETRY_WRITES: 'false'
  - id: lint
    display_name: Lint
    values:
      - id: on
        display_name: On
        variables:
          LINT: '1'
  - id: "as"
    display_name: ActiveSupport
    values:
      - id: "as"
        display_name: AS
        variables:
          WITH_ACTIVE_SUPPORT: true
  - id: "single-mongos"
    display_name: Single Mongos
    values:
      - id: "single-mongos"
        display_name: Single Mongos
        variables:
          SINGLE_MONGOS: 'true'
  - id: storage-engine
    display_name: Storage Engine
    values:
      - id: mmapv1
        display_name: MMAPv1
        run_on: ubuntu1604-test
        variables:
          MMAPV1: 'true'


buildvariants:
-
  matrix_name: "ruby-min"
  matrix_spec:
    auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
    ruby: "ruby-2.3"
    mongodb-version: "3.6"
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "ruby-mid"
  matrix_spec:
    auth-and-ssl: "auth-and-ssl"
    ruby: [ruby-2.4, ruby-2.5]
    mongodb-version: "4.0"
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "mongo"
  matrix_spec:
    auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
    ruby: "ruby-2.6"
    mongodb-version: "*"
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "single-mongos"
  matrix_spec:
    auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
    ruby: "ruby-2.6"
    mongodb-version: ["4.2", latest]
    topology: "sharded-cluster"
    single-mongos: single-mongos
    os: rhel70
  display_name: "${mongodb-version} ${topology} single-mongos ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "partial-auth-ssl"
  matrix_spec:
    auth-and-ssl: ["auth-and-nossl", "noauth-and-ssl"]
    ruby: "ruby-2.6"
    mongodb-version: ["4.0"]
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "no-retry-reads"
  matrix_spec:
    retry-reads: no-retry-reads
    ruby: "ruby-2.6"
    mongodb-version: ["4.0"]
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${retry-reads} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "no-retry-writes"
  matrix_spec:
    retry-writes: no-retry-writes
    ruby: "ruby-2.6"
    mongodb-version: ["4.0"]
    topology: [replica-set, sharded-cluster]
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${retry-writes} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: mmapv1
  matrix_spec:
    ruby: "ruby-2.6"
    mongodb-version: [3.4, 3.6, 4.0]
    topology: '*'
    storage-engine: mmapv1
    os: rhel70
  display_name: "${mongodb-version} ${topology} mmapv1 ${ruby}"
  tasks:
     - name: "test-mlaunch"

-
  matrix_name: "lint"
  matrix_spec:
    lint: on
    ruby: "ruby-2.6"
    mongodb-version: ["4.0", "4.2"]
    topology: [replica-set, sharded-cluster]
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${lint} ${ruby}"
  tasks:
     - name: "test-mlaunch"

-
  matrix_name: "jruby-auth"
  matrix_spec:
    auth-and-ssl: "auth-and-ssl"
    ruby: "jruby-9.2"
    mongodb-version: "4.2"
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "jruby-noauth"
  matrix_spec:
    auth-and-ssl: "noauth-and-nossl"
    ruby: "jruby-9.2"
    mongodb-version: "2.6"
    topology: "*"
    os: rhel70
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "zlib-auth"
  matrix_spec:
    auth-and-ssl: "auth-and-ssl"
    ruby: "ruby-2.6"
    mongodb-version: "4.2"
    topology: "*"
    compressor: 'zlib'
    os: rhel70
  display_name: "${compressor} ${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "zlib-noauth"
  matrix_spec:
    auth-and-ssl: "noauth-and-nossl"
    ruby: "ruby-2.3"
    mongodb-version: "3.6"
    topology: "*"
    compressor: 'zlib'
    os: rhel70
  display_name: "${compressor} ${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "ruby-head"
  matrix_spec:
    auth-and-ssl: ["auth-and-ssl", "noauth-and-nossl"]
    ruby: ["ruby-head"]
    mongodb-version: "4.0"
    topology: "*"
    os: ubuntu1604
  display_name: "${mongodb-version} ${topology} ${auth-and-ssl} ${ruby}"
  tasks:
     - name: "test"

- matrix_name: "activesupport"
  matrix_spec:
    ruby: ruby-2.5
    mongodb-version: '4.0'
    topology: replica-set
    as: as
    os: rhel70
  display_name: "AS ${mongodb-version} ${topology} ${ruby}"
  tasks:
     - name: "test"

-
  matrix_name: "3.6-with-3.4-fcv"
  matrix_spec:
    fcv: '3.4'
    ruby: ["ruby-2.5"]
    mongodb-version: '3.6'
    topology: replica-set
    os: rhel70
  display_name: "3.6 Replica Set with 3.4 FCV"
  tasks:
    - name: "test"

-
  matrix_name: "local-tls"
  matrix_spec:
    ruby: "*"
    mongodb-version: ['4.0', '4.2']
    topology: standalone
    os: ubuntu1604
  display_name: "Local TLS ${mongodb-version} ${ruby}"
  tasks:
    - name: "local-tls-tests"

-
  matrix_name: "enterprise-auth-tests-ubuntu"
  matrix_spec:
    auth-and-ssl: "auth-and-ssl"
    # Ruby 2.6 and 2.4 segfault
    ruby: ["ruby-2.5", "jruby-9.2"]
  display_name: "Enterprise Auth Ubuntu ${ruby}"
  run_on:
    - ubuntu1604-test
  tasks:
    - name: "enterprise-auth-tests"

-
  matrix_name: "enterprise-auth-tests-rhel"
  matrix_spec:
    auth-and-ssl: "auth-and-ssl"
    # Ruby 2.6 and 2.5 segfault
    ruby: ["ruby-2.3", "ruby-2.4"]
    os: rhel70
  display_name: "Enterprise Auth ${ruby} ${os}"
  tasks:
    - name: "enterprise-auth-tests"

# Enterprise auth tests on debian are omitted due to segfaults:
# https://jira.mongodb.org/browse/RUBY-1534

-
  matrix_name: "kerberos-tests"
  matrix_spec:
    auth-and-ssl: "noauth-and-nossl"
    ruby: "ruby-2.6"
    mongodb-version: "4.2"
    topology: standalone
    os: rhel70
  display_name: "Kerberos Tests"
  tasks:
    - name: "kerberos-tests"

-
  matrix_name: "x509-tests"
  matrix_spec:
    auth-and-ssl: "auth-and-ssl"
    ruby: "ruby-2.6"
    mongodb-version: "4.2"
    topology: standalone
    os: rhel70
  display_name: "X.509 Tests"
  tasks:
    - name: "x509-tests"

-
  matrix_name: "fle-tests"
  matrix_spec:
    auth-and-ssl: "noauth-and-nossl"
    ruby: ["ruby-2.3", "ruby-2.4", "ruby-2.5", "ruby-2.6", "jruby-9.2"]
    topology: standalone
    mongodb-version: "4.2"
    os: rhel70
  display_name: "FLE Tests: ${ruby}"
  tasks:
    - name: "fle-tests"
