# Based on the community driven style-guide available here:
# https://github.com/bbatsov/ruby-style-guide

AllCops:
  # Include gemspec and Rakefile
  Includes:
    - '**/*.gemspec'
    - '**/Rakefile'
    - 'tasks/**/*.rake'
  Excludes: []

# Limit lines to 80 characters.
LineLength:
  Max: 80
  Enabled: true

# Avoid methods longer than 10 lines of code
MethodLength:
  CountComments: false  # count full line comments?
  Max: 10
  Enabled: true

# Avoid parameter lists longer than five parameters.
ParameterLists:
  Max: 5
  CountKeywordArgs: true
  Enabled: true

# Don't use semicolons to terminate expressions.
Semicolon:
  # For example; def area(height, width); height * width end
  AllowAfterParameterListInOneLineMethods: false
  # For example; def area(height, width) height * width; end
  AllowBeforeEndInOneLineMethods: true
  Enabled: true

# Avoid single-line methods.
SingleLineMethods:
  AllowIfMethodIsEmpty: true
  Enabled: true

# Use spaces inside hash literal braces - or don't.
SpaceInsideHashLiteralBraces:
  EnforcedStyleIsWithSpaces: true
  Enabled: true

# Symbol literals should use snake_case.
SymbolName:
  AllowCamelCase: true
  Enabled: true

# Avoid more than `Max` levels of nesting.
BlockNesting:
  Max: 3
  Enabled: true

# Use %r for regular expressions matching more than `MaxSlashes` '/'
# characters.
# Use %r only for regular expressions matching more than `MaxSlashes` '/'
# character.
RegexpLiteral:
  MaxSlashes: 1
  Enabled: true

# Align with the style guide.
CollectionMethods:
  PreferredMethods:
    collect: 'map'
    inject: 'reduce'
    detect: 'find'
    find_all: 'select'
  Enabled: true

# Muli-line method chaining should be done with leading dots.
DotPosition:
  Style: 'leading'
  Enabled: true

# Enforce UTF-8 Encoding for Ruby 1.9
Encoding:
  Enabled: false

# No hard tabs.
Tab:
  Enabled: true

# Avoid trailing whitespace.
TrailingWhitespace:
  Enabled: true

# Indent when as deep as case.
CaseIndentation:
  Enabled: true

# Use empty lines between defs.
EmptyLineBetweenDefs:
  Enabled: true

# Don't use several empty lines in a row.
EmptyLines:
  Enabled: true

# Use spaces around operators.
SpaceAroundOperators:
  Enabled: true

# Use spaces around { and before }.
SpaceAroundBraces:
  Enabled: true

# No spaces after ( or before ).
SpaceInsideParens:
  Enabled: true

# No spaces after [ or before ].
SpaceInsideBrackets:
  Enabled: true

# Use spaces after commas.
SpaceAfterComma:
  Enabled: true

# Use spaces after colons.
SpaceAfterColon:
  Enabled: true

# Use spaces after if/elsif/unless/while/until/case/when.
SpaceAfterControlKeyword:
  Enabled: true

# Prefer symbols instead of strings as hash keys.
# We still support Ruby 1.8 so this should remain disabled.
HashSyntax:
  Enabled: false

# Use Unix-style line endings.
EndOfLine:
  Enabled: true

# Add underscores to large numeric literals to improve their readability.
NumericLiterals:
  Enabled: true

# Align the parameters of a method call if they span more than one line.
AlignParameters:
  Enabled: true

# Use def with parentheses when there are arguments.
DefWithParentheses:
  Enabled: true

# Omit the parentheses when the method doesn't accept any arguments.
DefWithoutParentheses:
  Enabled: true

# Never use if x; .... Use the ternary operator instead.
IfWithSemicolon:
  Enabled: true

# Never use then for multi-line if/unless.
MultilineIfThen:
  Enabled: true

# Favor the ternary operator(?:) over if/then/else/end constructs.
OneLineConditional:
  Enabled: true

# Avoid using {...} for multi-line blocks (multiline chaining is always ugly).
# Prefer {...} over do...end for single-line blocks.
Blocks:
  Enabled: true

# Prefer ' strings when you don't need string interpolation or special symbols.
StringLiterals:
  Enabled: true

# Avoid multi-line ?: (the ternary operator); use if/unless instead.
MultilineTernaryOperator:
  Enabled: true

# Use one expression per branch in a ternary operator.
NestedTernaryOperator:
  Enabled: true

# Never use unless with else. Rewrite these with the positive case first.
UnlessElse:
  Enabled: true

# Use &&/|| instead of and/or.
AndOr:
  Enabled: true

# Use when x then ... for one-line cases.
WhenThen:
  Enabled: true

# Favor modifier if/unless usage when you have a single-line body.
IfUnlessModifier:
  Enabled: true

# Favor modifier while/until usage when you have a single-line body.
WhileUntilModifier:
  Enabled: true

# Favor unless over if for negative conditions (or control flow or).
FavorUnlessOverNegatedIf:
  Enabled: true

# Favor until over while for negative conditions.
FavorUntilOverNegatedWhile:
  Enabled: true

# Use spaces around the = operator when assigning default values in def params.
SpaceAroundEqualsInParameterDefault:
  Enabled: true

# Use the new lambda literal syntax for single-line blocks.
Lambda:
  Enabled: true

# Use proc instead of Proc.new.
Proc:
  Enabled: true

# Don't use parentheses around the condition of an if/unless/while.
ParenthesesAroundCondition:
  Enabled: true

# Use snake_case for symbols, methods and variables.
MethodAndVariableSnakeCase:
  Enabled: true

# Use CamelCase for classes and modules.
ClassAndModuleCamelCase:
  Enabled: true

# Prefer each over for.
AvoidFor:
  Enabled: true

# Avoid Perl-style global variables.
AvoidPerlisms:
  Enabled: true

# Avoid Perl-style regex back references.
AvoidPerlBackrefs:
  Enabled: true

# Avoid the use of class variables.
AvoidClassVars:
  Enabled: false

# Don't interpolate global, instance and class variables directly in strings.
VariableInterpolation:
  Enabled: true

# Don't use semicolons to terminate expressions.
Semicolon:
  Enabled: true

# Use sprintf instead of String#%.
FavorSprintf:
  Enabled: true

# Use Array#join instead of Array#*.
FavorJoin:
  Enabled: true

# Use alias_method instead of alias.
Alias:
  Enabled: true

# Use ! instead of not.
Not:
  Enabled: true

# Avoid using rescue in its modifier form.
RescueModifier:
  Enabled: true

# Never use return in an ensure block.
EnsureReturn:
  Enabled: true

# Don't suppress exception.
HandleExceptions:
  Enabled: true

# Use only ascii symbols in identifiers.
AsciiIdentifiers:
  Enabled: true

# Use only ascii symbols in comments.
AsciiComments:
  Enabled: true

# Do not use block comments.
BlockComments:
  Enabled: true

# Avoid rescuing the Exception class.
RescueException:
  Enabled: true

# Prefer literals to Array.new/Hash.new/String.new.
EmptyLiteral:
  Enabled: true

# When defining binary operators, name the argument other.
OpMethod:
  Enabled: true

# Name reduce arguments |a, e| (accumulator, element)
ReduceArguments:
  Enabled: true

# Use self when defining module/class methods.
ClassMethods:
  Enabled: true

# Use %w or %W for arrays of words.
WordArray:
  Enabled: true

# Avoid the use of line continuation (/).
LineContinuation:
  Enabled: true

# Comments should start with a space.
LeadingCommentSpace:
  Enabled: true

# Do not use :: for method call.
ColonMethodCall:
  Enabled: true

# Do not introduce global variables.
AvoidGlobalVars:
  Enabled: true

# The use of eval represents a serious security risk.
Eval:
  Enabled: true

# Constants should use SCREAMING_SNAKE_CASE.
ConstantName:
  Enabled: true

# Indent private/protected as deep as defs and keep blank lines around them.
AccessControl:
  Enabled: true

# Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.
Loop:
  Enabled: true

# Avoid explicit use of the case equality operator(===).
CaseEquality:
  Enabled: true

# Document classes and non-namespace modules.
Documentation:
  Enabled: false

# Do not use parentheses for method calls with no arguments.
MethodCallParentheses:
  Enabled: true

# Checks for redundant do after while or until.
WhileUntilDo:
  Enabled: true

# Checks for uses of character literals.
CharacterLiteral:
  Enabled: true

# Avoid the use of BEGIN blocks.
BeginBlock:
  Enabled: true

# Avoid the use of END blocks.
EndBlock:
  Enabled: true

## Warnings

# Don't use assignment in conditions.
AssignmentInCondition:
  Enabled: true
  AllowSafeAssignment: true

# Align ends correctly.
EndAlignment:
  Enabled: true

# Possible use of operator/literal/variable in void context.
Void:
  Enabled: true

# Unreachable code.
UnreachableCode:
  Enabled: true

# Unused local variable.
UnusedLocalVariable:
  Enabled: true

# Do not use the same name as outer local variable
# for block arguments or block local variables.
ShadowingOuterLocalVariable:
  Enabled: true

# END blocks should not be placed inside method definitions.
EndInMethod:
  Enabled: true

# Checks of literals used in conditions.
LiteralInCondition:
  Enabled: true

# Checks for uses of Module#attr.
Attr:
  Enabled: true
